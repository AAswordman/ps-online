# 这是一行注释（不会执行）

'''
 这是多行注释
'''

"""
这也是注释
"""

#注意，=是赋值，不是等式，是右边的值传给左边


a = 2 #a是一个变量，现在赋值为2
#a变量储存的数据类型为：整数(int)
#int的全称为integer

b = 2.0 #b是一个变量，现在赋值为2.0
#b变量储存的类型为：浮点数(float)

c = "hello world" #c是一个变量，现在赋值为hello world
#两端的引号仅仅只是标志作用，真正传进去的是中间的内容
#c变量储存的类型为：字符串(str)
#str的全称为string

d = True #d是一个变量，现在赋值为True
#d变量储存的类型为：布尔值(bool)，可以理解为True或者False（是或者否）
#bool的全称为boolean

e = None #e是一个变量，现在赋值为None
#e变量储存的类型为：空值(NoneType)
#一般用来占位用，比如程序执行结果为空时可以反回None

#以上就是变量赋值和基本类型。其他的类型都是上面的组合形式（我是这样理解的）
#注意: a = "True" 和 a = True 是完全不同的东西，a = "True"是字符串，a = True是布尔值

f = [1,2,3] #这是一个列表，里面存了三个整数。列表是一个新的类型。

g = (1,2,3,4,5) #这是一个元组，里面存了五个整数。元组是一个新的类型。
#元组和列表差不多，但是元组内容不可改变，列表内容可以改变


#除此之外，可以试试变量名可以怎么取，以及哪些名字取不了（保留关键字取不了）
abbbb1 = 1
a_1 = 1
你好 = 1
#class = 1 就不行
esbgkeushguehghe = 999999



#输入与输出
f = "请输入"
input(f) #给输入的函数传入一个变量，用于提示
# 等同于 input("请输入")

print(c) #输出c变量的内容
# 等同于 print("hello world")

#变量思维是初学最重要的思维，要学会变量的灵活使用（比如什么时候直接写值方便，什么时候写个变量再传进去方便

#算数运算符
#这个东西也非常符合我们的认知，很好理解

a = 1+2
b = 1*2
c = 1/2
d = 1-2
e = 1%2 #求余
f = 1**2 #求幂
g = 1//2 #整除
h = 1 * 3 + a / 5 #运算符合数学规律
print(a,b,c,d,e,f,g,h) #print可以往里面塞一长串变量输出，很方便

#赋值运算符
#我的理解就是这个东西就是为了方便才诞生的
a += 1 #等价于 a = a + 1
a -= 1 #等价于 a = a - 1
a *= 1 #等价于 a = a * 1
a /= 1 #等价于 a = a / 1
a %= 1 #等价于 a = a % 1
a **= 1 #等价于 a = a ** 1
a //= 1 #等价于 a = a // 1

#实际上就前两个最常用，后面基本都是直接写出来比较直观

#比较运算符
#比较运算符就是用来比较两个变量的大小关系
a = 1
b = 2
c = a > b
print(c) #输出是或者否，说明c是一个布尔值类型

#当出现< 或者>的时候，整个式子就会变成以求bool为目的
print(a == b) #这个才是真正的判断等于，=是赋值
print(a != b) #判断不等于，只要a 和 b 不相等，那么就是返回True
print(a < b) #判断小于
print(a > b) #判断大于
print(a <= b) #判断小于等于
print(a >= b) #判断大于等于

#逻辑运算符
#逻辑运算符就是用来组合多个布尔值，比如a和b都是True，那么a and b就是True，a or b就是True
a = True
b = False
print(a and b)
print(a or b)
# and ，当a   和   b都为True的时候，返回True，否则返回False
# or ，当a  或者  b为True的时候，返回True，否则返回False

print(not (a>b)) #正常情况下，小括号可以增加运算优先级
#他是有个优先级表的，我不建议死记，不确定就加小括号就行了

#not :可以把False变成True，把True变成False

#以下的本质是布尔值和布尔值的组合
a = 1
b = 2
c = 2
print(a == b and a == c or b == c) #注：and优先级更高，先and才会执行or

#位运算符：以后再说，这个暂时用不到而且比较难

#python 缩进
#当遇到代码块的时候，整个代码块要前进一个缩进，一般都是4个空格（也可以是键盘上的tab按一次）
#一个文件中python的缩进是固定的，不能随便改


# 函数：
#函数其实也是一种变量类型。比如print，就是一个函数，也是一个变量。（现在你明白为什么会有保留关键字了吧）
a = print #这个时候他就是一个变量
print() #当存了函数的变量后面加了小括号，这个函数就会发挥作用。
a("当然这个也可以") #这个时候a被赋予了print，所以也可以打印内容

#函数会有一个返回值,比如 a = print() ，这个时候a就可以拿到print函数调用后的返回值了

#python中有一些函数是内置的，可以直接调用，可以实现一些功能
print("hello world")
print(input("请输入")) #input函数以字符串返回用户输入内容，返回一个字符串
#这两个都是函数。其他还有：
a = 1
print(str(a)) #把其他的变量转化成字符串
print(int("1")) #把字符串转化成整数
print(float("1.1")) #把字符串转化成浮点数
print(bool("False")) #把其他变量类型转化成布尔值

print(type(a)) #type函数可以获取变量类型，并以字符串返回类型名字
print(len("hello world")) #len函数可以获取字符串的长度，也可以获取元组长度,返回一个int
print(len([3,2,24])) #len函数可以获取字符串的长度，也可以获取元组长度,返回一个int
print(max(1,2,3)) #max函数可以获取给出数据中的最大值，返回一个int或者float
print(min(1,2,3)) #min函数可以获取给出数据中的最小值，返回一个int或者float
print(sum([1,2,3])) #sum函数可以获取给出数据（列表）的和，返回一个int或者float
print(range(5)) #range函数可以返回一个长度为输入值的列表。这个在后面很有用
#不过print的返回值呢？可以试试print打印一下print函数调用的结果。

# 程序的执行：
# 程序一般是从上往下执行的。

a = 2
print(a)

# 分支语句
#这个运行示意的框图应该也很常见了
if a == 1:
    print("a等于1") #这个print的前面有一个缩进
    print("a确实等于1")
elif a == 2: #当第一个条件不满足，会跳过上面那个代码块，转而判断这个条件是否满足
    print("a等于2")
    print("a确实等于2")
elif a == 3: #前面那个条件满足了，那么后面的这些都不会执行了
    print("a等于3")
else: #在其他语言中,一般前面都是else if，能够更好表现英语寓意，但是python中简化成了elif
        #前面的条件都不满足，就会执行这里
    print("a不等于1，2，3")

#注意：if判断的是右侧式子返回的类型，并且只能判断bool
#这个语句是合理的：if True:
#                   print("True")

#代码块中也符号从上往下执行规律，那么就可以套娃了
if a == 2:
    if b == 1:
        print("a等于2，b等于1")
    else:
        print("a等于2，b不等于1")
else:
    print("a不等于2")


# 循环语句
# 循环语句就是重复执行一段代码，直到满足某个条件为止
# 循环语句的格式：
for i in range(5): #等价于for i in [0,1,2,3,4]:
    print(i) #这个i就是列表中的每一个元素
    #当for里面的代码执行完毕后，他会回到for语句的开头，然后执行for里面的代码
    #每次执行，i都会被赋予一个全新的值，这个值是从range(5)的返回值里面提取的。
    #range(5)的返回值是[0,1,2,3,4]
    
#以上代码等价于：
print(0)
print(1)
print(2)
print(3)
print(4)


# while语句
a = 1
while a < 10:
    a = a + 1
    print(a)
#while特点：只要满足条件，就会一直执行下去，直到条件不满足为止
#这个东西判断依据和if一样，本质是判断是True还是False


#和for一样，执行到底会回去重新执行，只不过循环判断不同


#循环语句有时候会遇到特殊情况，我们会希望他中途能跳出来，不再继续循环
# 那么break和continue就用上了。
for i in range(5):
    if i == 2:
        continue #当i等于2的时候，会直接执行下一次循环，无视后面的代码
    print(i)
    if i == 3:
        break #当i等于3的时候，会直接跳出循环，不再执行后面的代码和后面的循环
    print(i)


#读取，修改和切片

a = [1,2,3,4,5,6]
print(a[0]) #读取列表中第一个元素。对没错，0是第一位
print(a[-1]) #读取最后一个元素（python特色）
#所有的负索引运行的时候都会自动加上len(a)

a[0] = 0 #修改列表中第一个元素
print(a[0]) #发现元素被修改了

#接下来是特色：切片。我个人觉得比较生涩难懂


print(a[1:3]) #切片，读取第二个到第三个元素（a[1],a[2]），3位置读取不到
print(a[:3]) #切片，读取第一个到第三个元素（第一个位置不写默认0，第三个位置不写默认1）
print(a[3:]) #切片，读取第四个到最后一个元素（第二个位置不写默认len(a)）
print(a[::2]) #切片，读取每隔一个元素读。(a[0],a[2],a[4])
print(a[::-1]) #切片，读取倒序 。倒序模式第一个元素默认len(a)-1，第二个元素默认-1
print(a[::-2]) #切片，读取每隔一个元素倒序


#自定义函数
def my_function(a,b): #这是定义函数的格式，def +函数名字+参数
    print(a + b) #这里的参数和def外界是不相通的，仅仅取决于传入的数据。
    return a + b #定义函数的返回值

print(my_function(1,2)) #可以像其他内置函数一样调用，传参数，返回了

#my_function其实也是一个变量。那么，能不能把存了函数的变量传进函数呢？答案是可以的。
def tester(func,a):
    return func(a)

tester(print,"hello world")
